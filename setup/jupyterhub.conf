#
# Elasticluster JupyterHub example
#
# This example shows how to set up a single-node JupyterHub server:
# ElastiCluster will provision a virtual machine, install
# Jupyter/IPython and configure the JupyterHub server to run as a
# service over the default HTTPS website. (By default, a self-signed
# TLS/SSL certificate is used for HTTPS.)
#
# It is a complete and self-contained example that should get you
# started with running JupyterHub servers on Google Cloud Platform.
# You can replace the `[cloud/google]` and `[login/google]` sections
# to get a JupyterHub server running on any other cloud.
#
# In order to use the JupyterHub server:
#
# 1. Note down the IP address of the server VM created by ElastiCluster
# 2. In your browser, open https://server.ip/
# 3. Accept the self-signed SSL certificate in the browser
# 4. Log in using username and password
#
# Note that you must edit the default security group to allow
# connections to port 443!
#


# JupyterHub software to be configured by Ansible
#
# (There is nothing Google-specific in the "setup" section; in fact, it can be
# re-used verbatim with *any* cloud provider or base image)
#
[setup/jupyterhub]
provider=ansible
server_groups=jupyterhub


# The following stanza defines a "cluster" made of a single VM which
# runs JupyterHub configured to provide Python 2.x and 3.x notebooks.
#
[cluster/ju16]
setup=jupyterhub
server_nodes=1
ssh_to=server

# The rest of this section is cloud-specific; uncomment the part
# relevant to the cloud you would like to use, and be sure to also
# fill in the correct values in the corresponding `[cloud/...]`
# section below.
#

# * This is for SWITCHengines
cloud=switch
# Ubuntu Xenial 16.04 (SWITCHengines)
image_id=ebb67fcd-3176-4395-8574-b318d8361020
login=ubuntu
flavor=c1.large
network_ids=c34c17a4-341e-463e-ab52-eed4817387ad
request_floating_ip=yes
floating_network_id=3cc83f7d-9119-475b-ba17-f3510c7902e8
security_group=default

# * This is for Google Cloud:
#cloud=google-cloud
#login=google-login
#image_id=****REPLACE WITH OUTPUT FROM: gcloud compute images list | grep debian | cut -f 1 -d " "****
#flavor=n1-standard-1

# * This is for UZH Science Cloud
# cloud=science-cloud
# # Ubuntu 16.04
# image_id=a52eff18-a621-4168-8c2c-0439e3dd92ce
# login=ubuntu
# flavor=4cpu-16ram-hpc
# network_ids=c86b320c-9542-4032-a951-c8a068894cc2
# security_group=default

[login/ubuntu]
image_user=ubuntu
image_user_sudo=root
image_sudo=True
# replace with the actual path to your SSH key
user_key_private=~/.ssh/scits_id_rsa
user_key_public=~/.ssh/scits_id_rsa.pub
# this must be the name of a key pair that matches the above files;
# if it does not exist, ElastiCluster will create one for you
user_key_name=Kashev - ScITS


####################
# SWITCHengines
####################

# This is an example of how to use SWITCHengines to run VMs.
#
# Fill in `auth_url`, `username`, `password`, etc. with the values
# from the "OpenRC v2" file that you can download from the web
# interface.
#
[cloud/switch]
provider=openstack
auth_url= https://keystone.cloud.switch.ch:5000/v2.0
username=alexander.kashev@math.unibe.ch
password=$OS_PASSWORD
project_name=$OS_PROJECT_NAME
region_name=ZH
# this is needed on SWITCHengines to make VMs have a public IP address
request_floating_ip=yes


####################
# UZH Science Cloud
####################

# This is an example of how to configure a cloud backend for UZH'
# "Science Cloud" infrastructure
#
# Fill in `auth_url`, `username`, `password`, etc. with the values
# from the "OpenRC v2" file that you can download from the web
# interface.
#
[cloud/science-cloud]
provider=openstack
auth_url=https://cloud.s3it.uzh.ch:5000/v2.0
username=rmurri
password=$OS_PASSWORD
project_name=$OS_PROJECT_NAME


####################
# Google Cloud
####################

# Creating a JupyterHub server on Google Cloud requires a special
# `[login/*]` section: in contrast to other cloud providers, GCE
# creates a personal account on each VM.
#
# See http://googlegenomics.readthedocs.io/en/latest/use_cases/setup_gridengine_cluster_on_compute_engine/index.html
# if you're unsure how to fill the values below.
#
[cloud/google-cloud]
provider=google
gce_project_id=****REPLACE WITH YOUR PROJECT ID****
gce_client_id=****REPLACE WITH YOUR CLIENT ID****
gce_client_secret=****REPLACE WITH YOUR SECRET KEY****
zone=europe-west-1d

[login/google-login]
image_user=****REPLACE WITH YOUR GOOGLE USERID (just the userid, not email)****
image_user_sudo=root
image_sudo=True
user_key_name=elasticluster
# You can generate the keypair with the command: `gcloud compute config-ssh`
user_key_private=~/.ssh/google_compute_engine
user_key_public=~/.ssh/google_compute_engine.pub
